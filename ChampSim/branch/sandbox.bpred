#include "ooo_cpu.h"
#include "bp_candidates.h"

Predictor* basicBP[NUM_CPUS];
Predictor* complexBP[NUM_CPUS];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " Sandbox branch predictor" << endl;
    complexBP[cpu] = new Perceptron();
    complexBP[cpu]->reset();
}

/**
 * @brief Predict if the input branch instruction will be taken or not
 * 
 * @param instr The input branch instruction
 * @return true (1) if predicted taken, false (0) otherwise
 * 
 * TODO: The current sandbox is just a wrapper of the pereptron predictor.
 *       Need to implement more advanced decision logics.
 */
uint8_t O3_CPU::predict_branch(ooo_model_instr instr)
{
    Prediction pred2 = complexBP[cpu]->predict(instr.ip);
    return pred2.taken;
}

/**
 * @brief Update the internal states of predictors
 * 
 * @param instr The branch instruction with known outcome
 */
void O3_CPU::last_branch_result(ooo_model_instr instr)
{
    complexBP[cpu]->update(instr.ip, instr.branch_taken);
}
