#include "ooo_cpu.h"
#include "bp_candidates.h"

#include <fstream>
#include <sstream>

Predictor* predictor[NUM_CPUS];

/**
 * Increased upon mispredict, decreased over time.
 * Triggers a reset on the corresponding predictor when above certain threshold
 */
uint64_t reset_score[NUM_CPUS];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " Sandbox branch predictor" << endl;

    // Initialize predictor
    Predictor* complex = new Perceptron(7, 256, 8);
    Predictor* simple = new Gshare(10, 2);
    predictor[cpu] = new Tournament(simple, complex, 8);
}

/**
 * @brief Predict if the input branch instruction will be taken or not
 * 
 * @param instr The input branch instruction
 * @return true (1) if predicted taken, false (0) otherwise
 * 
 * TODO: Try more basic & complex predictor combinations
 * and update & reset policies
 */
uint8_t O3_CPU::predict_branch(ooo_model_instr instr)
{
    bool predicted = predictor[cpu]->predict(instr.ip).taken;

    return predicted;
}

/**
 * @brief Update the internal states of predictors
 * 
 * @param instr The branch instruction with known outcome
 */
void O3_CPU::last_branch_result(ooo_model_instr instr)
{
    predictor[cpu]->update(instr.ip, instr.branch_taken);
}
